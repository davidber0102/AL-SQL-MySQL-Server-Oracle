/*
***********************************************CLASE 5***********************************
***********AITOINCREMENTO, PATRONES Y TRIGGERS*******************
---- CAMPOS DE AUTOINCREMENTE

*/

CREATE TABLE tb_identificacion(
	ID INT AUTO_INCREMENT NOT NULL,
    DESCRIPCION VARCHAR(50) NULL,
    PRIMARY KEY(ID)
);

SELECT * FROM tb_identificacion;

INSERT INTO tb_identificacion(DESCRIPCION) VALUES('CLIENTE A');

INSERT INTO tb_identificacion(DESCRIPCION) VALUES('CLIENTE B');
INSERT INTO tb_identificacion(DESCRIPCION) VALUES('CLIENTE C');
INSERT INTO tb_identificacion(DESCRIPCION) VALUES('CLIENTE D');
INSERT INTO tb_identificacion(DESCRIPCION) VALUES('CLIENTE E');

DELETE FROM tb_identificacion WHERE ID= 6;

INSERT INTO tb_identificacion(DESCRIPCION) VALUES('CLIENTE F');

INSERT INTO tb_identificacion(DESCRIPCION) VALUES('CLIENTE G');

INSERT INTO tb_identificacion(ID, DESCRIPCION) VALUES(100, 'CLIENTE H');

-- EJERCICIO DE LA PLATAFORMA
CREATE TABLE TAB_IDENTITY2 (ID INT AUTO_INCREMENT, DESCRIPTOR VARCHAR(20), PRIMARY KEY(ID));
INSERT INTO TAB_IDENTITY2 (DESCRIPTOR) VALUES ('CLIENTE1');
INSERT INTO TAB_IDENTITY2 (DESCRIPTOR) VALUES ('CLIENTE2');
INSERT INTO TAB_IDENTITY2 (DESCRIPTOR) VALUES ('CLIENTE3');
INSERT INTO TAB_IDENTITY2 (ID, DESCRIPTOR) VALUES (NULL, 'CLIENTE4');
DELETE FROM TAB_IDENTITY2 WHERE ID = 3;
INSERT INTO TAB_IDENTITY2 (ID, DESCRIPTOR) VALUES (NULL, 'CLIENTE6');
INSERT INTO TAB_IDENTITY2 (ID, DESCRIPTOR) VALUES (NULL, 'CLIENTE7');
DELETE FROM TAB_IDENTITY2 WHERE ID = 2;

SELECT * FROM TAB_IDENTITY2;
/*
*************Definiendo patrones para campos*******************
*/
CREATE TABLE TB_DEFAULT(
	ID INT AUTO_INCREMENT, 
    DESCRIPTOR VARCHAR(50) NOT NULL, 
    DIRECCION VARCHAR(100) NULL,
    CIUDAD VARCHAR(50) DEFAULT 'Monterrey',
    FECHA_CREACCION TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY(ID)
);

SELECT * FROM TB_DEFAULT;

INSERT INTO TB_DEFAULT (DESCRIPTOR, DIRECCION, CIUDAD, FECHA_CREACCION) VALUES('CLIENTE X', 'calle sol, 2525', 'Cancun', '2021-01-01');

INSERT INTO TB_DEFAULT (DESCRIPTOR) VALUES('CLIENTE X');

/*
******************TRIGGER
-- UN TRIGGER ES UN TIPO ESPECIAL DE PROCEDIMIENTO ALMACENADO QUE SE EJECUTA CUANDO UN EVENTO OCURRE EN EL SERVIDOR DE LA BASE DE DATOS
EJEMPLO :    AL INCLUIR DATOS EN UNA TABLA, SE ACTUALIZA UN LOG CON FECHA Y HORA
---------------------SINTAXIS PAGINA OFICIAL
		CREATE
			[DEFINER = user]
			TRIGGER [IF NOT EXISTS] trigger_name
			trigger_time trigger_event
			ON tbl_name FOR EACH ROW
			[trigger_order]
			trigger_body

		trigger_time: { BEFORE | AFTER }
		trigger_event: { INSERT | UPDATE | DELETE }
		trigger_order: { FOLLOWS | PRECEDES } other_trigger_name
*/
CREATE TABLE tb_facturacion(
	FECHA DATE NULL,
    VENTA_TOTAL FLOAT
);

SELECT * FROM tb_facturacion;

CREATE TABLE `tb_factura1` (
  `NUMERO` varchar(5) NOT NULL,
  `FECHA` date DEFAULT NULL,
  `DNI` varchar(11) NOT NULL,
  `MATRICULA` varchar(5) NOT NULL,
  `IMPUESTO` float DEFAULT NULL,
  PRIMARY KEY (`NUMERO`),
  KEY `FK_CLIENTE1` (`DNI`),
  KEY `FK_VENDEDOR1` (`MATRICULA`),
  CONSTRAINT `FK_CLIENTE1` FOREIGN KEY (`DNI`) REFERENCES `tb_cliente` (`DNI`),
  CONSTRAINT `FK_VENDEDOR1` FOREIGN KEY (`MATRICULA`) REFERENCES `tb_vendedor` (`MATRICULA`)
);

SELECT * FROM tb_factura1;

CREATE TABLE `tb_item_factura1` (
  `NUMERO` varchar(5) NOT NULL,
  `CODIGO` varchar(10) NOT NULL,
  `CANTIDAD` int DEFAULT NULL,
  `PRECIO` float DEFAULT NULL,
  PRIMARY KEY (`NUMERO`,`CODIGO`),
  KEY `FK_PRODUCTO1` (`CODIGO`),
  CONSTRAINT `FK_FACTURA1` FOREIGN KEY (`NUMERO`) REFERENCES `tb_factura1` (`NUMERO`),
  CONSTRAINT `FK_PRODUCTO1` FOREIGN KEY (`CODIGO`) REFERENCES `tb_producto` (`CODIGO`)
);
SELECT * FROM tb_item_factura1;
SELECT * FROM tb_cliente;
SELECT * FROM tb_vendedor;
SELECT * FROM tb_producto;

INSERT INTO `ventas_jugos`.`tb_factura1` (`NUMERO`,`FECHA`,`DNI`,`MATRICULA`,`IMPUESTO`)
		VALUES('0100','2021-01-01','1471156710','235',0.10);
        
INSERT INTO `ventas_jugos`.`tb_item_factura1`(`NUMERO`,`CODIGO`,`CANTIDAD`,`PRECIO`)
 VALUES('0100', '1002767', 100, 25), ('0100', '1004327', 200, 25), ('0100', '1013793', 300, 25);

SELECT * FROM `ventas_jugos`.`tb_item_factura1`;

USE ventas_jugos;
SELECT A.FECHA, SUM(B.CANTIDAD * B.PRECIO) AS VENTA_TOTAL FROM tb_factura1 A 
INNER JOIN 
tb_item_factura1 B
ON A.NUMERO = B.NUMERO
GROUP BY FECHA;

SELECT * FROM tb_factura1;
SELECT * FROM tb_item_factura1;

INSERT INTO `ventas_jugos`.`tb_factura1` (`NUMERO`,`FECHA`,`DNI`,`MATRICULA`,`IMPUESTO`)
		VALUES('0101','2021-01-01','1471156710','235',0.10);
        
INSERT INTO `ventas_jugos`.`tb_item_factura1`(`NUMERO`,`CODIGO`,`CANTIDAD`,`PRECIO`)
 VALUES('0101', '1002767', 100, 25), ('0101', '1004327', 200, 25), ('0101', '1013793', 300, 25);
 
 
 -- CREACION DE TIGGER PARA ACTUALZAR
 SELECT * FROM tb_facturacion;
 SELECT * FROM tb_factura1;
SELECT * FROM tb_item_factura1;

 DELIMITER //
 CREATE TRIGGER TG_FACTURACION_INSERT AFTER INSERT ON tb_item_factura1
 FOR EACH ROW BEGIN
		 DELETE FROM tb_facturacion;
		 INSERT INTO tb_facturacion
			SELECT A.FECHA, SUM(B.CANTIDAD * B.PRECIO) AS VENTA_TOTAL FROM tb_factura1 A 
			INNER JOIN 
				tb_item_factura1 B
			ON A.NUMERO = B.NUMERO
			GROUP BY FECHA;
END //
 
 INSERT INTO `ventas_jugos`.`tb_factura1` (`NUMERO`,`FECHA`,`DNI`,`MATRICULA`,`IMPUESTO`)
		VALUES('0103','2021-01-01','1471156710','235',0.10);
        
INSERT INTO `ventas_jugos`.`tb_item_factura1`(`NUMERO`,`CODIGO`,`CANTIDAD`,`PRECIO`)
 VALUES('0103', '1002767', 100, 25), ('0103', '1004327', 200, 25), ('0103', '1013793', 300, 25);
 
 
 
  INSERT INTO `ventas_jugos`.`tb_factura1` (`NUMERO`,`FECHA`,`DNI`,`MATRICULA`,`IMPUESTO`)
		VALUES('0104','2021-01-01','1471156710','235',0.10);
        
INSERT INTO `ventas_jugos`.`tb_item_factura1`(`NUMERO`,`CODIGO`,`CANTIDAD`,`PRECIO`)
 VALUES('0104', '1002767', 200, 25), ('0104', '1004327', 400, 30), ('0104', '1013793', 500, 25);
 
 -- EJERCICIO DE PLATAFORMA
  -- ----- El siguiente comando SQL calcula la edad actual del cliente:
  SELECT DNI, EDAD, FECHA_NACIMIENTO, timestampdiff(YEAR, FECHA_NACIMIENTO, NOW()) AS ANOS FROM tb_cliente;

-- CCREAMOS EL TIGGER PARA QUE ACTUALICE LAS EDADES DE LOS CLEINTES EN LA TABLA CLEINES, SIEMPR QUE LA TABLA SUFRA UNA INCLUSION

 DELIMITER //
 CREATE TRIGGER TG_EDAD_CLIENTES_INSERT BEFORE INSERT ON tb_cliente
 FOR EACH ROW BEGIN
		SET NEW.EDAD = timestampdiff(YEAR, NEW.FECHA_NACIMIENTO, NOW());
END //

-- CREAREMOS UN TRIGGER PARA UPDATE Y DELETE
 -- CREACION DE TIGGER PARA ACTUALZAR
 SELECT * FROM tb_facturacion;
 SELECT * FROM tb_factura1;
SELECT * FROM tb_item_factura1;


UPDATE tb_item_factura1 SET CANTIDAD = 600	WHERE NUMERO = '0101' AND CODIGO = '1002767';

DELETE FROM tb_item_factura1 WHERE NUMERO = '0104' AND CODIGO = '1004327';
-- TRIGGER DELETE
 DELIMITER //
 CREATE TRIGGER TG_FACTURACION_DELETE AFTER DELETE ON tb_item_factura1
 FOR EACH ROW BEGIN
		 DELETE FROM tb_facturacion;
		 INSERT INTO tb_facturacion
			SELECT A.FECHA, SUM(B.CANTIDAD * B.PRECIO) AS VENTA_TOTAL FROM tb_factura1 A 
			INNER JOIN 
				tb_item_factura1 B
			ON A.NUMERO = B.NUMERO
			GROUP BY FECHA;
END //

-- TRIGGER UPDAATE
DELIMITER //
 CREATE TRIGGER TG_FACTURACION_UPDATE AFTER UPDATE ON tb_item_factura1
 FOR EACH ROW BEGIN
		 DELETE FROM tb_facturacion;
		 INSERT INTO tb_facturacion
			SELECT A.FECHA, SUM(B.CANTIDAD * B.PRECIO) AS VENTA_TOTAL FROM tb_factura1 A 
			INNER JOIN 
				tb_item_factura1 B
			ON A.NUMERO = B.NUMERO
			GROUP BY FECHA;
END //

 SELECT * FROM tb_facturacion;
 SELECT * FROM tb_factura1;
SELECT * FROM tb_item_factura1;

UPDATE tb_item_factura1 SET CANTIDAD = 800	WHERE NUMERO = '0101' AND CODIGO = '1002767';

DELETE FROM tb_item_factura1 WHERE NUMERO = '0104' AND CODIGO = '1013793';

/*
***************** MANIPILACION DE DATOS
----STORED PROCEDURES
---- HERRAMIENTAS ETL DEL MERCADO: INFORMATICA, PENTAHO, POWER CENTER, SAPDATA SERVICES, SQL SERVER INFROMATION SERVICES, (.....)
--- PROGRACION : PYTHON, JVA, PHP, .NET


*/